report: "report/workflow.rst"
configfile: "config.yaml"

rule all:
	input:
		expand("{sample}_HGT_candidates_summary.pdf", sample=config["sample"], out=config["output"])

#workdir: config["working_dir"]

# try gubbnis
# use pipeline on subclades
# assembliyes quality
# visualisation of OF, PanX

def mem_calc():
	return int(config["mem"]/config["threads"])

def t_calc():
	return int(config["threads"]/2)

# todo
# 0. add R to PATH
# 1. replace ../inputs directory with a config file
# 2. tree of dia hits and correspoding OG!
# (hits of protein x and og of protein x -> tree!)
# 3. cfml for removing recombinant regions from of-msa -> treetime
# 4. ancestral state prediction (gene gain vs loss!)
# 5. reconstruct of ancestral seq for each OG and run diamond

# 6. recombinant dna position mapping
# - instead of search of an exact position range
# - check if the protein is in the recombinant region or not!


# OrthoFinder performs light trimming of the MSA to prevent overly long runtimes
# & RAM usage caused by very long, gappy alignemnts. A column is trimmed from
# the alignment if is it greater than 90% gaps and provided two conditions are met.
# 1. The length of the trimmed alignment cannot go below 500 AA
# 2. No more than 25% of non-gap characters can be removed from the alignment.
# If either of these conditions are not met then the threshold for the percentage
# of gaps in removed columns is progressively #increased beyond 90% until both conditions are met.
# The trimming can be turned off using the option "-z".


# Part 1: load the genome data from genBank files into a database
rule parse_GBs:
	input:
		core_ogs=config["orthoFinder"]+"/Species_Tree/Orthogroups_for_concatenated_alignment.txt",
		ogs2prot=config["orthoFinder"]+"/Orthogroups/Orthogroups.tsv",
		gbs=config["input_gbs"]
	output:
		protGB="GENOME_PROTEIN_DB_{sample}.pkl"
	conda:
		"env/core_g_env.yml"
	threads: 1
	resources:
		mem_mb=config['mem']
	notebook:
		"scripts/gb2pkl.ipynb"

# Can generate initial tree using OrthoFinderAll single copy orthologs and/or refer to PanX run
# Identify individual phylotype membership for each strain (add to metadata?)
# Repeat OrthoFinder step for individual phylotypes



# use OG rthogroups_for_concatenated_alignment.txt to get the nucleotides
# use SpeciesTree/SpeciesTree_rooted.txt as tree
# use MultipleSequenceAlignments/SpeciesTreeAlignment.fa as msa
#rule nucl_for_concatenated_alignment:
#	input:
#		rules.OrthoFinderPhylotype.output.dir
#	output:
#		"{sample}_nucl_for_pmsa.fasta"
#	shell:
#		"touch {output}"

# extract single copy orthologs (prot) alignments
# extract corresponding nuc sequences using ID
# generate nucleotide alignments with pal2nal (with reference to pro alignment and corresponding nuc fasta seqs)
# concatenate all single copy nucleotide alignments (retain positional info?) >> e.g. phylotype1_msa
# remove invariant sites from msa and generate initial tree with raxml >> phylotype1_snps + phylotype1_snp_tree
# run clonalframeml using phylotype1_msa + phylotype1_snp_tree

#rule assign_OGs_to_time:
#	input:
#		ogs=rules.OrthoFinderPhylotype.output.dir,
#		tree="{sample}_treetime"
#	output:
#		"{sample}_dated_OGs.csv"
#	shell:
#		"touch {output}"

rule OGs_to_MSA:
	input:
		#tree_in=rules.OrthoFinderPhylotype.output.dir,
		core_ogs=config["orthoFinder"]+"/Species_Tree/Orthogroups_for_concatenated_alignment.txt",
		ogs2prot=config["orthoFinder"]+"/Orthogroups/Orthogroups.tsv",
		path2aln=config["orthoFinder"]+"/MultipleSequenceAlignments/",
		prot_db="GENOME_PROTEIN_DB_{sample}.pkl"
	output:
		msa_fasta="{sample}_concat.fasta",
		msa_xmfa="{sample}_concat.xmfa",
		aln2acc="MSA_ACC_DB_{sample}.pkl"
	params:
		path2OF="/Users/devseeva/Desktop/work/rso/OrthoFinder/"
	conda:
		"env/core_g_env.yml"
	threads: 1
	resources:
		mem_mb=config['mem']
	notebook:
		"scripts/ogs2msa.ipynb"

#rule Modeltest_NG:
#	input:
#		msa="{sample}_concat.fasta"
#	output:
#		dir=directory("{sample}_modeltest_1")
#	conda:
#		"env/phyml_tree_env.yml"
#	shell:
#		"mkdir {output.dir};"
#		"modeltest-ng  -i {input.msa};"
#		"mv {input.msa}.* {output.dir}"

#rule PhyML:
#	input:
#		msa="{sample}_concat.nexus",
		# TODO model=rules.Modeltest_NG.output.dir
		#modet_test_log="{sample}_modeltest_1/{sample}_concat.fasta.log"
		#tmp="/Users/devseeva/Desktop/work/sm_workflow/snakefiles/scripts/core_OG_nucl_MSA.phylip_phyml_tree.txt"
#	output:
#		"{sample}_ML_tree_with_RR.nwk"
#	conda:
#		"env/phyml_tree_env.yml"
#	shell:
		##"phyml_command=$(grep -m1 \"> phyml\" {input.modet_test_log}) ; "
		##"phyml_command=${phyml_command#>} ; "
		##"$phyml_command"
#		"phyml  -i {input.msa} -m 012345 -f m -v 0 -a e -c 4 -o tlr; "
#		"mv {input.msa}_phyml_tree.txt {output}"

rule RAxML:
	input:
		msa="{sample}_concat.fasta",
		# TODO model=rules.Modeltest_NG.output.dir
		#modet_test_log="{sample}_modeltest_1/{sample}_concat.fasta.log"
		#tmp="/Users/devseeva/Desktop/work/sm_workflow/snakefiles/scripts/core_OG_nucl_MSA.phylip_phyml_tree.txt"
	output:
		"{sample}_ML_tree_with_RR.nwk"
	conda:
		"env/core_g_env.yml"
	threads: t_calc()
	resources:
		mem_mb=mem_calc()
	shell:
		"raxml-ng --msa {input.msa} --model GTR+I+G4 --threads {threads}; "
		"cp {input.msa}.raxml.bestTree {output}"

# TODO: tree from OF is different for MSA and not MSA methods!
# TODO: model test on MSA, RAxML_or_PhyML, -> tree for CFML
# + one tree after removing recombination
# originally used panX SNPs tree (../inputs/panX...)

# tried kappa = 0.46, 0.93 from Modeltest_NG substituion rates
# (ag+ct)/(ac+at+cg+gt)

# TODO number of chars is different for the alignments!!!
# 6Mb for CFML, 2,7 Mb for original MSA from OF (phy2)
rule clonalFrameML:
	input:
		msa="{sample}_concat_s1.xmfa",
		tree="{sample}_ML_tree_with_RR.nwk"
	output:
		dir=directory("{sample}_cfml")
	conda:
		"env/core_g_env.yml"
	threads: 1
	resources:
		mem_mb=config['mem']
	shell:
		"mkdir {output};"
		#"cp DEBUG/rso_test_cfml/* {output}"
		"ClonalFrameML {input.tree} {input.msa} {output} -xmfa_file true ; "
		"mv {output}.* {output}/"

rule clonalFrameML2:
	input:
		msa="{sample}_concat_s2.xmfa",
		tree="{sample}_ML_tree_with_RR.nwk"
	output:
		dir=directory("{sample}_cfml2")
	conda:
		"env/core_g_env.yml"
	threads: 1
	resources:
		mem_mb=config['mem']
	shell:
		"mkdir {output};"
		"ClonalFrameML {input.tree} {input.msa} {output} -xmfa_file true ; "
		"mv {output}.* {output}/"

# here I use the absolute path to my R instalation
# may cause errors, should be replaced with R conda env
rule cfmlResultR_plot:
	input:
		dir=rules.clonalFrameML.output.dir
	params:
		files_prefix="{sample}_cfml",
		#path2R="/Library/Frameworks/R.framework/Versions/4.0/Resources/Rscript"
	output:
		report("{sample}.cfml.pdf",
		caption="report/cfml.rst", category="CFML: recombination prediction")
	conda:
		"env/r_env.yml"
	threads: 1
	resources:
		mem_mb=config['mem']
	script:
		"scripts/cfml_results.R"
	#shell:
		#"cp DEBUG/rso_test.cfml.pdf {output}"
		#"{params.path2R} ../scripts/cfml_results.R {input.dir}/{params.files_prefix};"
		#"mv {input.dir}/{params.files_prefix}*.pdf {output}"

rule remove_recombinations_from_MSA:
	input:
		cfml=rules.clonalFrameML.output.dir,
		xm_msa_in = "{sample}_concat.xmfa",
		fa_msa_in = "{sample}_concat.fasta",
		accDB="MSA_ACC_DB_{sample}.pkl",
		protDB="GENOME_PROTEIN_DB_{sample}.pkl"
	params:
		recombis="{sample}_cfml/{sample}_cfml.importation_status.txt",
		tree="{sample}_cfml/{sample}_cfml.labelled_tree.newick"
	output:
		fa_msa_out="{sample}_concat_no_RR.fasta",
		updated_recombis="{sample}_recombis2prot.csv",
		mult_recombis="{sample}_recombis_mult_genes.txt",
		top_recombis="{sample}_recombis_top_genes.txt",
	conda:
		"env/core_g_env.yml"
	threads: 1
	resources:
		mem_mb=config['mem']
	notebook:
		"scripts/remove_recombinations_from_MSA.ipynb"

rule Modeltest_NG_II:
	input:
		msa="{sample}_concat_no_RR.fasta"
	output:
		dir=directory("{sample}_modeltest_2"),
		log="{sample}_modeltest_2/{sample}_concat_no_RR.fasta.out"
	conda:
		"env/core_g_env.yml"
	threads: config["threads"]
	resources:
		mem_mb=mem_calc()
	shell:
		"rmdir {output.dir};"
		"mkdir {output.dir};"
		"modeltest-ng  -i {input.msa} -t ml --template raxml -p {threads};"
		"mv {input.msa}.* {output.dir}"

# TODO modeltest results as an input
#rule PhyML_II:
#	input:
#		msa="{sample}_concat_no_RR.nexus",
#		model=rules.Modeltest_NG_II.output.dir
		# TODO model=rules.Modeltest_NG.output.dir
		#modet_test_log="{sample}_modeltest_1/{sample}_concat.fasta.log"
#	output:
#		"{sample}_ML_tree.nwk"
#	conda:
#		"env/phyml_tree_env.yml"
#	shell:
		##"phyml_command=$(grep -m1 \"> phyml\" {input.modet_test_log}) ; "
		##"phyml_command=${phyml_command#>} ; "
		##"$phyml_command"
#		"phyml  -i {input.msa} -m 012345 -f m -v 0 -a e -c 4 -o tlr; "
#		"mv {input.msa}_phyml_tree.txt {output}"

rule RAxML_II:
	input:
		msa="{sample}_concat_no_RR.fasta",
		modeltest="{sample}_modeltest_2/{sample}_concat_no_RR.fasta.out"
	params:
		algo="raxml"
	output:
		"{sample}_ML_tree.nwk"
	conda:
		"env/core_g_env.yml"
	threads: config["threads"]
	resources:
		mem_mb=mem_calc()
	notebook:
		"scripts/parse_ML_model.ipynb"

# treetime --aln core_OG_nucl_MSA.fasta --tree SpeciesTree_rooted_node_labels.txt --dates metainfo.csv --date-column collection_date --plot-tree test_rso_treeTime.pdf --outdir OUTDIR
### !!! TreeTime.reroot: rerooting will ignore covariance and shared ancestry. !!!
rule treeTime:
	input:
		#debug=rules.OrthoFinderPhylotype.output.dir,
		tree="{sample}_ML_tree.nwk",
		#"/Users/devseeva/Desktop/work/sm_workflow/snakefiles/rso_test_cfml/rso_test_cfml.labelled_tree.newick",
		msa="{sample}_concat_no_RR.fasta",
		dates=config['meta']
	params:
		plot_name="{sample}_treetime.pdf"
	output:
		dir=directory("{sample}_treetime"),
		plot=report("{sample}_treetime/{sample}_treetime.pdf",
		caption="report/treeTime.rst", category="Population structure")
	conda:
		"env/core_g_env.yml"
	threads: 1
	resources:
		mem_mb=config['mem']
	shell:
		#"mkdir {output.dir}; touch {output.plot}"
		"treetime --aln {input.msa} --tree {input.tree} --dates {input.dates} --date-column collection_date --name-column strain --plot-tree {params.plot_name} --outdir {output.dir}"

#TODO Fehler in treeWAS(snps = snps, phen = test_phen_CD, tree = tree, n.subs = n.subs,  :
#  Some elements of names(phen)
#                                                 are absent from tree$tip.label.
#Ausführung angehalten
rule treeWAS:
	input:
		cfml=rules.clonalFrameML.output.dir,
		tttttt="{sample}_treetime/{sample}_treetime.pdf",
		meta="../inputs/{sample}_metadata/{sample}_cleaned_data_TW.csv"
	params:
		prefix="{sample}_cfml/{sample}_cfml"
	threads: 1
	resources:
		mem_mb=config['mem']
	output:
		report("{sample}_treeWAS_plots.pdf",caption="report/treeWAS.rst",category="CFML: recombination prediction")
	script:
		"../scripts/treeWAS.R"
	#shell:
	#	"cp DEBUG/rso_test_treeWAS_plots.pdf {output}"


# Summary
rule final:
	input:
		### not for mart! --- time=directory("{sample}_treetime"),
		#cfml="{sample}.cfml.pdf",
		#tWas="{sample}_treeWAS_plots.pdf",
		recombination=rules.clonalFrameML.output.dir,
		##recombination2=rules.clonalFrameML2.output.dir
		tree="{sample}_ML_tree.nwk"
	output:
		#dir=directory('{sample}_gt_outputs')
		report("{sample}_HGT_candidates_summary.pdf",
		caption="report/hgt_info.rst", category="HGT candidates")
	params:
		out_dir=config['output'],
		sample=config['sample']
	threads: 1
	resources:
		mem_mb=1000
	shell:
		#"mkdir {params.out_dir}/{params.sample}_gt_outputs; "
		"mv *{params.sample}* {params.out_dir}; ls;"
		"touch {output}; ls "
